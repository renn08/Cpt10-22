#                            y = "Classification error",
#                            colour="",group="",
#                            linetype="",shape="") + scale_x_log10()
plot_ly(dataL, x = ~log(Logcost), y = ~value, color = ~variable,
colors = c('blue', 'red', "green"), type="scatter", mode="lines") %>%
layout(xaxis = list(title = 'log(Cost)'), yaxis = list(title = 'Classifier Error'), legend = list(orientation = 'h'),
title="SVM CV-Plot of Model Performance (Iris Data)") %>% hide_colorbar()
set.seed(2020)
gammas = exp(-5:5)
tune_g = tune.svm(Species~., kernel = "radial", data = iris_train, cost = costs, gamma = gammas)
tune_g
iris.svm_g <- svm(Species~., data=iris_train,
kernel="radial", gamma=0.0183, cost=20)
table(iris_test$Species, predict(iris.svm_g, iris_test))
agreement<-predict(iris.svm_g, iris_test)==iris_test$Species
prop.table(table(agreement))
google_model3<-neuralnet(Investing~Unemployment+Rental+RealEstate+Mortgage+Jobs+DJI_Index+StdDJI, data=google_train, hidden = 3)
plot(google_model3)
google_pred3<-compute(google_model3, google_test[, c(1:5, 7:8)])
pred_results3<-google_pred3$net.result
cor(pred_results3, google_test$Investing)
qol<-read.csv("https://umich.instructure.com/files/481332/download?download_frd=1")
featureLength <- dim(qol)[2]
str(qol[, c((featureLength-3):featureLength)])
qol<-qol[!qol$CHARLSONSCORE==-9 , -c(1, 2)]
qol$CHARLSONSCORE<-as.factor(qol$CHARLSONSCORE)
featureLength <- dim(qol)[2]
str(qol[, c((featureLength-3):featureLength)])
sub<-sample(nrow(qol), floor(nrow(qol)*0.75))
qol_train<-qol[sub, ]
qol_test<-qol[-sub, ]
qol_clas2<-ksvm(CHARLSONSCORE~., data=qol_train, kernel="rbfdot", C=2)
qol_clas2
qol.pred2<-predict(qol_clas2, qol_test)
# table(qol.pred2, qol_test$CHARLSONSCORE)
agreement<-qol.pred2==qol_test$CHARLSONSCORE
prop.table(table(agreement))
tab <- table(qol.pred2, qol_test$CHARLSONSCORE)
tab_df <- tidyr::spread(as.data.frame(tab), key = Var2, value = Freq)
sum(diag(table(hand_letter_predictions, hand_letters_test$letter)))
plot_ly(x = colnames(tab), y = colnames(tab), z = as.matrix(tab_df[, -1]), type = "heatmap")
qol_clas3<-ksvm(CHARLSONSCORE~., data=qol_train, kernel="rbfdot", C=3)
qol_clas3
qol.pred3<-predict(qol_clas3, qol_test)
# table(qol.pred3, qol_test$CHARLSONSCORE)
agreement<-qol.pred3==qol_test$CHARLSONSCORE
prop.table(table(agreement))
tab <- table(qol.pred3, qol_test$CHARLSONSCORE)
tab_df <- tidyr::spread(as.data.frame(tab), key = Var2, value = Freq)
sum(diag(table(hand_letter_predictions, hand_letters_test$letter)))
plot_ly(x = colnames(tab), y = colnames(tab), z = as.matrix(tab_df[, -1]), type = "heatmap")
library(plotly)
sigmoid <- function(x) { 1 / (1 + exp(-x)) }
relu <- function(y) { pmin(pmax(0, y), 1) }
x_Llimit <- -5; x_Rlimit <- 5; y_Llimit <- 0; y_Rlimit <- 1
x <- seq(x_Llimit, x_Rlimit, 0.01)
# plot(c(x_Llimit,x_Rlimit), c(y_Llimit,y_Rlimit), type="n", xlab="Input/Domain", ylab="Output/Range" )
# lines(x, sigmoid(x), col="blue", lwd=3)
# lines(x, (1/2)*(tanh(x)+1), col="green", lwd=3)
# lines(x, relu(x), col="red", lwd=3)
# legend("left", title="Probability Transform Functions",
#        c("sigmoid","tanh","relu"), fill=c("blue", "green", "red"),
#       ncol = 1, cex = 0.75)
y <- sigmoid(x)
plot_ly(type="scatter")  %>%
add_trace(x = ~x, y=~y, name = 'Sigmoid()', mode = 'lines') %>%
add_trace(x = ~x, y = ~(1/2)*(tanh(x)+1), name = 'Tanh()', mode = 'lines') %>%
add_trace(x = ~x, y = ~relu(x+1/2), name = 'Relu()', mode = 'lines')%>%
layout(legend = list(orientation = 'h'), title="Probability Transformation Functions")
# install.packages("GGally"); install.packages("sna"); install.packages("network")
# library("GGally"); library(network); library(sna); library(ggplot2)
library('igraph')
#define node names
nodes <- c('a(1,1)','a(2,1)','a(3,1)','a(4,1)', 'a(5,1)', 'a(6,1)', 'a(7,1)',
'a(1,2)','a(2,2)','a(3,2)','a(4,2)', 'a(5,2)',
'a(1,3)','a(2,3)','a(3,3)',
'a(1,4)','a(2,4)'
)
# define node x,y coordinates
x <- c(rep(0,7), rep(2,5), rep(4,3), rep(6,2)
)
y <- c(1:7, 2:6, 3:5, 4:5)
# x;y  # print x & y coordinates of all nodes
#define edges
from <- c('a(1,1)','a(2,1)','a(3,1)','a(4,1)', 'a(5,1)', 'a(6,1)', 'a(7,1)',
'a(1,1)','a(2,1)','a(3,1)','a(4,1)', 'a(5,1)', 'a(6,1)', 'a(7,1)',
'a(1,1)','a(2,1)','a(3,1)','a(4,1)', 'a(5,1)', 'a(6,1)', 'a(7,1)',
'a(1,1)','a(2,1)','a(3,1)','a(4,1)', 'a(5,1)', 'a(6,1)', 'a(7,1)',
'a(1,1)','a(2,1)','a(3,1)','a(4,1)', 'a(5,1)', 'a(6,1)', 'a(7,1)',
'a(1,2)','a(2,2)','a(3,2)','a(4,2)', 'a(5,2)',
'a(1,2)','a(2,2)','a(3,2)','a(4,2)', 'a(5,2)',
'a(1,2)','a(2,2)','a(3,2)','a(4,2)', 'a(5,2)',
'a(1,3)','a(2,3)','a(3,3)',
'a(1,3)','a(2,3)','a(3,3)'
)
to <- c('a(1,2)','a(1,2)','a(1,2)','a(1,2)', 'a(1,2)', 'a(1,2)', 'a(1,2)',
'a(2,2)','a(2,2)','a(2,2)','a(2,2)', 'a(2,2)', 'a(2,2)', 'a(2,2)',
'a(3,2)','a(3,2)','a(3,2)','a(3,2)', 'a(3,2)', 'a(3,2)', 'a(3,2)',
'a(4,2)','a(4,2)','a(4,2)','a(4,2)', 'a(4,2)', 'a(4,2)', 'a(4,2)',
'a(5,2)','a(5,2)','a(5,2)','a(5,2)', 'a(5,2)', 'a(5,2)', 'a(5,2)',
'a(1,3)','a(1,3)','a(1,3)','a(1,3)', 'a(1,3)',
'a(2,3)','a(2,3)','a(2,3)','a(2,3)', 'a(2,3)',
'a(3,3)','a(3,3)','a(3,3)','a(3,3)', 'a(3,3)',
'a(1,4)','a(1,4)','a(1,4)',
'a(2,4)','a(2,4)', 'a(2,4)'
)
edge_names <- c("w(i=1,k=1,l=2)","","","", "", "", "",
"","","","", "", "", "",
"","","","w(i=4,k=3,l=2)", "", "", "",
"","","","", "", "", "",
"","","","", "", "", "w(i=5,k=7,l=2)",
"","","","", "",
"","","","", "",
"","w(i=2,k=3,l=3)","", "", "",
"w(i=1,k=1,l=4)","","",
"","", "w(i=2,k=3,l=4)"
)
NodeList <- data.frame(nodes, x ,y)
EdgeList <- data.frame(from, to, edge_names)
nn.graph <- graph_from_data_frame(vertices = NodeList, d= EdgeList, directed = TRUE) %>% set_edge_attr("label", value = edge_names)
# plot(nn.graph)
# install.packages("GGally"); install.packages("sna"); install.packages("network")
# library("GGally"); library(network); library(sna); library(ggplot2)
library('igraph')
#define node names
nodes <- c('a(1,1)','a(2,1)','a(3,1)','a(4,1)', 'a(5,1)', 'a(6,1)', 'a(7,1)',
'a(1,2)','a(2,2)','a(3,2)','a(4,2)', 'a(5,2)',
'a(1,3)','a(2,3)','a(3,3)',
'a(1,4)','a(2,4)'
)
# define node x,y coordinates
x <- c(rep(0,7), rep(2,5), rep(4,3), rep(6,2)
)
y <- c(1:7, 2:6, 3:5, 4:5)
# x;y  # print x & y coordinates of all nodes
#define edges
from <- c('a(1,1)','a(2,1)','a(3,1)','a(4,1)', 'a(5,1)', 'a(6,1)', 'a(7,1)',
'a(1,1)','a(2,1)','a(3,1)','a(4,1)', 'a(5,1)', 'a(6,1)', 'a(7,1)',
'a(1,1)','a(2,1)','a(3,1)','a(4,1)', 'a(5,1)', 'a(6,1)', 'a(7,1)',
'a(1,1)','a(2,1)','a(3,1)','a(4,1)', 'a(5,1)', 'a(6,1)', 'a(7,1)',
'a(1,1)','a(2,1)','a(3,1)','a(4,1)', 'a(5,1)', 'a(6,1)', 'a(7,1)',
'a(1,2)','a(2,2)','a(3,2)','a(4,2)', 'a(5,2)',
'a(1,2)','a(2,2)','a(3,2)','a(4,2)', 'a(5,2)',
'a(1,2)','a(2,2)','a(3,2)','a(4,2)', 'a(5,2)',
'a(1,3)','a(2,3)','a(3,3)',
'a(1,3)','a(2,3)','a(3,3)'
)
to <- c('a(1,2)','a(1,2)','a(1,2)','a(1,2)', 'a(1,2)', 'a(1,2)', 'a(1,2)',
'a(2,2)','a(2,2)','a(2,2)','a(2,2)', 'a(2,2)', 'a(2,2)', 'a(2,2)',
'a(3,2)','a(3,2)','a(3,2)','a(3,2)', 'a(3,2)', 'a(3,2)', 'a(3,2)',
'a(4,2)','a(4,2)','a(4,2)','a(4,2)', 'a(4,2)', 'a(4,2)', 'a(4,2)',
'a(5,2)','a(5,2)','a(5,2)','a(5,2)', 'a(5,2)', 'a(5,2)', 'a(5,2)',
'a(1,3)','a(1,3)','a(1,3)','a(1,3)', 'a(1,3)',
'a(2,3)','a(2,3)','a(2,3)','a(2,3)', 'a(2,3)',
'a(3,3)','a(3,3)','a(3,3)','a(3,3)', 'a(3,3)',
'a(1,4)','a(1,4)','a(1,4)',
'a(2,4)','a(2,4)', 'a(2,4)'
)
edge_names <- c("w(i=1,k=1,l=2)","","","", "", "", "",
"","","","", "", "", "",
"","","","w(i=4,k=3,l=2)", "", "", "",
"","","","", "", "", "",
"","","","", "", "", "w(i=5,k=7,l=2)",
"","","","", "",
"","","","", "",
"","w(i=2,k=3,l=3)","", "", "",
"w(i=1,k=1,l=4)","","",
"","", "w(i=2,k=3,l=4)"
)
NodeList <- data.frame(nodes, x ,y)
EdgeList <- data.frame(from, to, edge_names)
nn.graph <- graph_from_data_frame(vertices = NodeList, d= EdgeList, directed = TRUE) %>% set_edge_attr("label", value = edge_names)
# plot(nn.graph)
# igraph examples: http://michael.hahsler.net/SMU/LearnROnYourOwn/code/igraph.html
map <- function(x, range = c(0,1), from.range=NA) {
if(any(is.na(from.range))) from.range <- range(x, na.rm=TRUE)
## check if all values are the same
if(!diff(from.range)) return(
matrix(mean(range), ncol=ncol(x), nrow=nrow(x),
dimnames = dimnames(x)))
## map to [0,1]
x <- (x-from.range[1])
x <- x/diff(from.range)
## handle single values
if(diff(from.range) == 0) x <- 0
## map from [0,1] to [range]
if (range[1]>range[2]) x <- 1-x
x <- x*(abs(diff(range))) + min(range)
x[x<min(range) | x>max(range)] <- NA
return(x)
}
col <- rep("gray",length(V(nn.graph))) # input layer
col[c(1:7, 16:17)] <- "lightblue"      # hidden layer
col[16:17] <- "lightgreen"             # output layer
plot(nn.graph, vertex.color=col, vertex.size=map(betweenness(nn.graph),c(25,30)), ylab="Input Layer", xlab="A schematic of fully-connected feed-forward neural network")
# plot(nn.graph, vertex.size=map(betweenness(nn.graph),c(20,30)), edge.width=map(edge.betweenness(nn.graph), c(1,5)))
# install.packages("GGally"); install.packages("sna"); install.packages("network")
# library("GGally"); library(network); library(sna); library(ggplot2)
library('igraph')
#define node names
nodes <- c('a(1,1)','a(2,1)','a(3,1)','a(4,1)', 'a(5,1)', 'a(6,1)', 'a(7,1)',
'a(1,2)','a(2,2)','a(3,2)','a(4,2)', 'a(5,2)',
'a(1,3)','a(2,3)','a(3,3)',
'a(1,4)','a(2,4)'
)
# define node x,y coordinates
x <- c(rep(0,7), rep(2,5), rep(4,3), rep(6,2)
)
y <- c(1:7, 2:6, 3:5, 4:5)
# x;y  # print x & y coordinates of all nodes
#define edges
from <- c('a(1,1)','a(2,1)','a(3,1)','a(4,1)', 'a(5,1)', 'a(6,1)', 'a(7,1)',
'a(1,1)','a(2,1)','a(3,1)','a(4,1)', 'a(5,1)', 'a(6,1)', 'a(7,1)',
'a(1,1)','a(2,1)','a(3,1)','a(4,1)', 'a(5,1)', 'a(6,1)', 'a(7,1)',
'a(1,1)','a(2,1)','a(3,1)','a(4,1)', 'a(5,1)', 'a(6,1)', 'a(7,1)',
'a(1,1)','a(2,1)','a(3,1)','a(4,1)', 'a(5,1)', 'a(6,1)', 'a(7,1)',
'a(1,2)','a(2,2)','a(3,2)','a(4,2)', 'a(5,2)',
'a(1,2)','a(2,2)','a(3,2)','a(4,2)', 'a(5,2)',
'a(1,2)','a(2,2)','a(3,2)','a(4,2)', 'a(5,2)',
'a(1,3)','a(2,3)','a(3,3)',
'a(1,3)','a(2,3)','a(3,3)'
)
to <- c('a(1,2)','a(1,2)','a(1,2)','a(1,2)', 'a(1,2)', 'a(1,2)', 'a(1,2)',
'a(2,2)','a(2,2)','a(2,2)','a(2,2)', 'a(2,2)', 'a(2,2)', 'a(2,2)',
'a(3,2)','a(3,2)','a(3,2)','a(3,2)', 'a(3,2)', 'a(3,2)', 'a(3,2)',
'a(4,2)','a(4,2)','a(4,2)','a(4,2)', 'a(4,2)', 'a(4,2)', 'a(4,2)',
'a(5,2)','a(5,2)','a(5,2)','a(5,2)', 'a(5,2)', 'a(5,2)', 'a(5,2)',
'a(1,3)','a(1,3)','a(1,3)','a(1,3)', 'a(1,3)',
'a(2,3)','a(2,3)','a(2,3)','a(2,3)', 'a(2,3)',
'a(3,3)','a(3,3)','a(3,3)','a(3,3)', 'a(3,3)',
'a(1,4)','a(1,4)','a(1,4)',
'a(2,4)','a(2,4)', 'a(2,4)'
)
edge_names <- c("w(i=1,k=1,l=2)","","","", "", "", "",
"","","","", "", "", "",
"","","","w(i=4,k=3,l=2)", "", "", "",
"","","","", "", "", "",
"","","","", "", "", "w(i=5,k=7,l=2)",
"","","","", "",
"","","","", "",
"","w(i=2,k=3,l=3)","", "", "",
"w(i=1,k=1,l=4)","","",
"","", "w(i=2,k=3,l=4)"
)
NodeList <- data.frame(nodes, x ,y)
EdgeList <- data.frame(from, to, edge_names)
nn.graph <- graph_from_data_frame(vertices = NodeList, d= EdgeList, directed = TRUE) %>% set_edge_attr("label", value = edge_names)
# plot(nn.graph)
# igraph examples: http://michael.hahsler.net/SMU/LearnROnYourOwn/code/igraph.html
map <- function(x, range = c(0,1), from.range=NA) {
if(any(is.na(from.range))) from.range <- range(x, na.rm=TRUE)
## check if all values are the same
if(!diff(from.range)) return(
matrix(mean(range), ncol=ncol(x), nrow=nrow(x),
dimnames = dimnames(x)))
## map to [0,1]
x <- (x-from.range[1])
x <- x/diff(from.range)
## handle single values
if(diff(from.range) == 0) x <- 0
## map from [0,1] to [range]
if (range[1]>range[2]) x <- 1-x
x <- x*(abs(diff(range))) + min(range)
x[x<min(range) | x>max(range)] <- NA
return(x)
}
col <- rep("gray",length(V(nn.graph))) # input layer
col[c(1:7, 16:17)] <- "lightblue"      # hidden layer
col[16:17] <- "lightgreen"             # output layer
plot(nn.graph, vertex.color=col, vertex.size=map(betweenness(nn.graph),c(25,30)), ylab="Input Layer", xlab="A schematic of fully-connected feed-forward neural network")
# plot(nn.graph, vertex.size=map(betweenness(nn.graph),c(20,30)), edge.width=map(edge.betweenness(nn.graph), c(1,5)))
col <- rep("gray",length(V(nn.graph))) # input layer
col[c(1:7, 16:17)] <- "lightblue"      # hidden layer
col[16:17] <- "lightgreen"             # output layer
plot(nn.graph, vertex.color=col)
title(main="A schematic of fully-connected feed-forward neural network")
mtext("Input Layer (j=1)", side=2, line=-1, col="blue")
mtext("     Output Layer (j=4)", side=4, line=-2, col="green")
mtext("Hidden Layers (j=2,3)", side=1, line=0, col="gray")
# install.packages("network")
library('igraph')
#define node names
nodes <- c('X', 'Y',                            # Inputs (0,1)
'H_1_1_th1','H_1_2_th2','H_1_3_th1', # Hidden Layer
'Z'                                  # Output Layer (0,1)
)
# define node x,y coordinates
x <- c(rep(0,2), rep(2,3), 4)
y <- c(c(1.5, 2.5), 1:3, 2)
##x;y  # print x & y coordinates of all nodes
#define edges
from <- c('X', 'X',
'Y', 'Y',
'H_1_1_th1', 'H_1_2_th2', 'H_1_3_th1',
'Z'
)
to <- c('H_1_1_th1', 'H_1_2_th2',
'H_1_2_th2', 'H_1_3_th1',
'Z', 'Z', 'Z', 'Z'
)
edge_names <- c(
'1', '1',
'1', '1',
'1', '-2', '1', '1'
)
NodeList <- data.frame(nodes, x ,y)
EdgeList <- data.frame(from, to, edge_names)
nn.graph <- graph_from_data_frame(vertices = NodeList, d= EdgeList, directed = TRUE) %>% set_edge_attr("label", value = edge_names)
# plot(nn.graph)
# See the iGraph specs here: http://kateto.net/networks-r-igraph
col <- rep("gray",length(V(nn.graph))) # input layer
col[c(3:5)] <- "lightblue"             # hidden layer
col[6] <- "lightgreen"                 # output layer
plot(nn.graph, vertex.color=col, vertex.shape="sphere", vertex.size=c(35, 35,   80, 80, 80, 35), edge.label.cex=1.5)
title(main="XOR Operator")
mtext("Input Layer: Bivariate (0,1)", side=2, line=-1, col="blue")
mtext("     Output Layer (XOR)", side=4, line=-2, col="green")
mtext("Hidden Layers (Neurons)", side=1, line=0, col="gray")
par(mfrow=c(2,2))    # 2 x 2 design
nodes <- c('X=0', 'Y=0',                        # Inputs
'H_1_1_th1','H_1_2_th2','H_1_3_th1', # Hidden Layer
'Z=0'                                # Output Layer (0,1)
)
# define node x,y coordinates
x <- c(rep(0,2), rep(2,3), 4)
y <- c(c(1.5, 2.5), 1:3, 2)
# x;y  # print x & y coordinates of all nodes
######### (0,0)
#define edges
from <- c('X=0', 'X=0',
'Y=0', 'Y=0',
'H_1_1_th1', 'H_1_2_th2', 'H_1_3_th1',
'Z=0'
)
to <- c('H_1_1_th1', 'H_1_2_th2',
'H_1_2_th2', 'H_1_3_th1',
'Z=0', 'Z=0', 'Z=0', 'Z=0'
)
edge_names <- c(
'1', '1',
'1', '1',
'1', '-2', '1', '1'
)
NodeList <- data.frame(nodes, x ,y)
EdgeList <- data.frame(from, to, edge_names)
nn.graph <- graph_from_data_frame(vertices = NodeList, d= EdgeList, directed = TRUE) %>% set_edge_attr("label", value = edge_names)
col <- rep("gray",length(V(nn.graph))) # input layer
col[c(3:5)] <- "lightblue"             # hidden layer
col[6] <- "lightgreen"                 # output layer
plot(nn.graph, vertex.color=col, vertex.shape="pie", vertex.size=c(30, 30,   40, 40, 40, 30), edge.label.cex=2,
edge.arrow.size=0.25)
title(main="XOR Operator")
mtext("Input Layer: Bivariate (X=0,Y=0)", side=2,line=-1, col="blue")
mtext("     Output Layer (XOR), Z=0", side=4, line=-2, col="green")
mtext("Hidden Layers (Neurons)", side=1, line=0, col="gray")
######### (0,1)
nodes <- c('X=0', 'Y=1',                        # Inputs
'H_1_1_th1','H_1_2_th2','H_1_3_th1', # Hidden Layer
'Z=1'                                # Output Layer (0,1)
)
#define edges
from <- c('X=0', 'X=0',
'Y=1', 'Y=1',
'H_1_1_th1', 'H_1_2_th2', 'H_1_3_th1',
'Z=1'
)
to <- c('H_1_1_th1', 'H_1_2_th2',
'H_1_2_th2', 'H_1_3_th1',
'Z=1', 'Z=1', 'Z=1',
'Z=1'
)
NodeList <- data.frame(nodes, x ,y)
EdgeList <- data.frame(from, to, edge_names)
nn.graph <- graph_from_data_frame(vertices = NodeList, d= EdgeList, directed = TRUE) %>% set_edge_attr("label", value = edge_names)
col <- rep("gray",length(V(nn.graph))) # input layer
col[c(3:5)] <- "lightblue"             # hidden layer
col[6] <- "lightgreen"                 # output layer
plot(nn.graph, vertex.color=col, vertex.shape="pie", vertex.size=c(30, 30,   40, 40, 40, 30), edge.label.cex=1,
edge.arrow.size=0.25)
title(main="XOR Operator")
mtext("Input Layer: Bivariate (X=0,Y=1)",side=2,line=-1, col="blue")
mtext("     Output Layer (XOR), Z=1", side=4, line=-2, col="green")
mtext("Hidden Layers (Neurons)", side=1, line=0, col="gray")
######### (1,0)
nodes <- c('X=1', 'Y=0',                        # Inputs
'H_1_1_th1','H_1_2_th2','H_1_3_th1', # Hidden Layer
'Z=1'                                # Output Layer (0,1)
)
#define edges
from <- c('X=1', 'X=1',
'Y=0', 'Y=0',
'H_1_1_th1', 'H_1_2_th2', 'H_1_3_th1',
'Z=1'
)
to <- c('H_1_1_th1', 'H_1_2_th2',
'H_1_2_th2', 'H_1_3_th1',
'Z=1', 'Z=1', 'Z=1',
'Z=1'
)
NodeList <- data.frame(nodes, x ,y)
EdgeList <- data.frame(from, to, edge_names)
nn.graph <- graph_from_data_frame(vertices = NodeList, d= EdgeList, directed = TRUE) %>% set_edge_attr("label", value = edge_names)
col <- rep("gray",length(V(nn.graph))) # input layer
col[c(3:5)] <- "lightblue"             # hidden layer
col[6] <- "lightgreen"                 # output layer
plot(nn.graph, vertex.color=col, vertex.shape="pie", vertex.size=c(30, 30,   40, 40, 40, 30), edge.label.cex=1,
edge.arrow.size=0.25)
title(main="XOR Operator")
mtext("Input Layer: Bivariate (X=1,Y=0)", side=2,line=-1, col="blue")
mtext("     Output Layer (XOR), Z=1", side=4, line=-2, col="green")
mtext("Hidden Layers (Neurons)", side=1, line=0, col="gray")
######### (1,1)
nodes <- c('X=1', 'Y=1',                        # Inputs
'H_1_1_th1','H_1_2_th2','H_1_3_th1', # Hidden Layer
'Z=0'                                # Output Layer (1,1)
)
#define edges
from <- c('X=1', 'X=1',
'Y=1', 'Y=1',
'H_1_1_th1', 'H_1_2_th2', 'H_1_3_th1',
'Z=0'
)
to <- c('H_1_1_th1', 'H_1_2_th2',
'H_1_2_th2', 'H_1_3_th1',
'Z=0', 'Z=0', 'Z=0',
'Z=0'
)
NodeList <- data.frame(nodes, x ,y)
EdgeList <- data.frame(from, to, edge_names)
nn.graph <- graph_from_data_frame(vertices = NodeList, d= EdgeList, directed = TRUE) %>% set_edge_attr("label", value = edge_names)
col <- rep("gray",length(V(nn.graph))) # input layer
col[c(3:5)] <- "lightblue"             # hidden layer
col[6] <- "lightgreen"                 # output layer
plot(nn.graph, vertex.color=col, vertex.shape="pie", vertex.size=c(30, 30,   40, 40, 40, 30), edge.label.cex=1.5,
edge.arrow.size=0.25)
title(main="XOR Operator")
mtext("Input Layer: Bivariate (X=1,Y=1)",side=2,line=-1, col="blue")
mtext("     Output Layer (XOR), Z=0", side=4, line=-2, col="green")
mtext("Hidden Layers (Neurons)", side=1, line=0, col="gray")
# install.packages("network")
library('igraph')
#define node names
nodes <- c('X', 'Y',                            # Inputs (0,1)
'H_th=1.3-(X+Y)',            # Hidden Layer
'Z'                                  # Output Layer (0,1)
)
# define node x,y coordinates
x <- c(rep(0,2), 2, 4)
y <- c(c(1.5, 2.5), 2, 2)
#x;y  # print x & y coordinates of all nodes
#define edges
from <- c('X', 'Y',
'H_th=1.3-(X+Y)'
)
to <- c('H_th=1.3-(X+Y)', 'H_th=1.3-(X+Y)',
'Z'
)
edge_names <- c(
'-1', '-1',
'1'
)
NodeList <- data.frame(nodes, x ,y)
EdgeList <- data.frame(from, to, edge_names)
nn.graph <- graph_from_data_frame(vertices = NodeList, d= EdgeList, directed = TRUE) %>% set_edge_attr("label", value = edge_names)
# plot(nn.graph)
# See the iGraph specs here: http://kateto.net/networks-r-igraph
col <- rep("gray",length(V(nn.graph))) # input layer
col[c(3)] <- "lightblue"             # hidden layer
col[4] <- "lightgreen"                 # output layer
plot(nn.graph, vertex.color=col, vertex.shape="sphere", vertex.size=c(35, 35,   80,    35), edge.label.cex=2)
title(main="NAND Operator")
mtext("Input Layer: Bivariate (X,Y)", side=2, line=-1, col="blue")
mtext("     Output Layer (NAND)", side=4, line=-2, col="green")
mtext("Hidden Layers (Neurons)", side=1, line=0, col="gray")
# devtools::install_github("rstudio/keras")
library("keras")
# install_keras()
#install.packages("tensorflow")
library(tensorflow)
#install_tensorflow()
Y
Y
Y
# devtools::install_github("rstudio/keras")
library("keras")
# install_keras()
#install.packages("tensorflow")
library(tensorflow)
#install_tensorflow()
devtools::install_github("rstudio/keras")
devtools::install_github("rstudio/keras")
install_keras()
library(keras)
install_keras()
library(tensorflow)
install.packages(c("class", "fansi", "foreign", "jsonlite", "MASS", "Matrix", "nlme", "nnet", "reticulate", "spatial"))
# devtools::install_github("rstudio/keras")
library("keras")
install_keras()
# devtools::install_github("rstudio/keras")
#library("keras")
#install_keras()
install.packages("tensorflow")
library(tensorflow)
#install_tensorflow()
install.packages("tensorflow")
# devtools::install_github("rstudio/keras")
#library("keras")
#install_keras()
install.packages("tensorflow")
library(tensorflow)
install_tensorflow()
